Function Table_split_quick(arg As String) As Integer
' This function is based on assumption that the data is the stack result of iGroupBy x iSplit. If not, need use Table_split instead.
Dim ArgList
Dim argListItem
Dim tempstr
Dim shtName
Dim SplitBy
Dim splitColName
Dim GroupBy
Dim outSheetName
Dim sDataSheet
Dim iColCnt, iRowCnt
Dim sSplitBy
Dim sSplitColumn
Dim GroupByAry
Dim j
Dim iRowCntNew
Dim iSplitCnt
Dim nowGroup
Dim nowSplitBy
Dim nowValue
Dim exist_Split
Dim k
Dim exist_Group
Dim i
Dim wsOut
Dim iGroupCnt

ArgList = Split(arg, ";")

For Each argListItem In ArgList
    tempstr = Split(argListItem, ":")
    Select Case tempstr(0)
    Case "DataSheetName"
        shtName = tempstr(1)
    Case "SplitBy"
        SplitBy = tempstr(1)
    Case "SplitColName"
        splitColName = tempstr(1)
    Case "GroupBy"
        GroupBy = tempstr(1)
    Case "OutSheetName"
        outSheetName = tempstr(1)
    End Select
Next argListItem

' if OutSheetName is "sameSheet", new column will be added into original sheet
If outSheetName <> "sameSheet" Then
    Sheets(shtName).Copy After:=Sheets(shtName)
    'ActiveWorkbook.Worksheets.Add After:=Worksheets(ActiveWorkbook.Worksheets.Count)
    ActiveSheet.Name = outSheetName
    Set wsOut = ActiveSheet
Else
    Set wsOut = Worksheets(shtName)
End If

iColCnt = wsOut.Cells(1, 1).CurrentRegion.Columns.Count
iRowCnt = wsOut.Cells(1, 1).CurrentRegion.Rows.Count

sSplitBy = SplitBy
sSplitColumn = splitColName
GroupByAry = Split(GroupBy, ",")

'copy SplitBy Column
wsOut.Columns(FindColNumByName(wsOut.Name, CInt(iColCnt), CStr(sSplitBy))).Copy Destination:=wsOut.Cells(1, iColCnt + 2)

'copy SplitColumn Column
wsOut.Columns(FindColNumByName(wsOut.Name, CInt(iColCnt), CStr(sSplitColumn))).Copy Destination:=wsOut.Cells(1, iColCnt + 3)

'Handle GroupColumn
'1st GroupColumn Component
Range(Cells(1, iColCnt + 1), Cells(iRowCnt, iColCnt)).Formula = "=" & Cells(1, FindColNumByName(CStr(wsOut.Name), CInt(iColCnt), CStr(GroupByAry(0)))).Address(ReferenceStyle:=xlA1, RowAbsolute:=False, ColumnAbsolute:=True)

' If GroupColumn Component >1, Concatinate them, will split them again at last
If UBound(GroupByAry) > 0 Then
    For j = 1 To UBound(GroupByAry)
        'if meet application-defined or object-defined error, check analysis script, groupBy may be wrong
        Range(Cells(1, iColCnt + 1), Cells(iRowCnt, iColCnt + 1)).Formula = CStr(Cells(1, iColCnt + 1).Formula) & "&""#""&" & Cells(1, FindColNumByName(CStr(wsOut.Name), CInt(iColCnt), CStr(GroupByAry(j)))).Address(ReferenceStyle:=xlA1, RowAbsolute:=False, ColumnAbsolute:=True)
    Next j
End If

' copy formula to value for concatinated column
wsOut.Cells.Copy
wsOut.Cells.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, skipblanks:=False, Transpose:=False

'Delete All columns to leave only GroupBy,SplitBy,SplitColumn
wsOut.Range(Columns(1), Columns(iColCnt)).Delete

'Sort by SplitBy, Then GroupBy
Range("A1").Select
wsOut.Sort.SortFields.Clear
wsOut.Sort.SortFields.Add Key:=Range("B:B"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal 'SplitBy
wsOut.Sort.SortFields.Add Key:=Range("A:A"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal 'GroupBy
With wsOut.Sort
    .SetRange Range("A:C")
    .Header = xlYes
    .MatchCase = False
    .Orientation = xlTopToBottom
    .SortMethod = xlPinYin
    .Apply
End With
wsOut.Sort.SortFields.Clear

' Start to split
' ###################
iRowCntNew = wsOut.Cells(1, 1).CurrentRegion.Rows.Count

' decide iGroupCnt
i = 3
While Cells(i, 2) = Cells(2, 2)
    i = i + 1
Wend
iGroupCnt = i - 2

' copy GroupBy
wsOut.Cells(1, 4) = CStr(wsOut.Cells(1, 1)) 'GroupBy
wsOut.Range(Cells(2, 1), Cells(iGroupCnt + 1, 1)).Copy Destination:=wsOut.Cells(2, 4)

' decide iSplitCnt
iSplitCnt = (iRowCntNew - 1) / iGroupCnt

' do the split (fill the value)
For i = 0 To iSplitCnt - 1
    wsOut.Cells(1, 5 + i) = wsOut.Cells(i * iGroupCnt + 2, 2)
    wsOut.Range(Cells(i * iGroupCnt + 2, 3), Cells(i * iGroupCnt + iGroupCnt + 1, 3)).Copy Destination:=wsOut.Cells(2, 5 + i)
Next i
' #######################
'split done, do clean up

'Delete Column 1,2,3
wsOut.Range(Columns(1), Columns(3)).Delete

'split multiple GroupBy
If UBound(GroupByAry) > 0 Then
    wsOut.Range(Columns(2), Columns(UBound(GroupByAry) + 1)).Insert

    wsOut.Columns("A:A").Select
    Selection.TextToColumns Destination:=Range("A1"), DataType:=xlDelimited, TextQualifier:=xlDoubleQuote, ConsecutiveDelimiter:=False, Tab:=False, Semicolon:=False, Comma:=False, Space:=False, Other:=True, OtherChar:="#", TrailingMinusNumbers:=True
End If
'recover screen update
Application.ScreenUpdating = True

'set all cells format
Cells.Select
Selection.Columns.AutoFit
Range("A1").Select

End Function